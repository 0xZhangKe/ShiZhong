package com.zhangke.shizhong.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHORT_PLAN".
*/
public class ShortPlanDao extends AbstractDao<ShortPlan, Long> {

    public static final String TABLENAME = "SHORT_PLAN";

    /**
     * Properties of entity ShortPlan.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property ParentPlanId = new Property(1, long.class, "parentPlanId", false, "PARENT_PLAN_ID");
        public final static Property CycleType = new Property(2, int.class, "cycleType", false, "CYCLE_TYPE");
        public final static Property Current = new Property(3, double.class, "current", false, "CURRENT");
        public final static Property Target = new Property(4, double.class, "target", false, "TARGET");
        public final static Property Unit = new Property(5, String.class, "unit", false, "UNIT");
    }


    public ShortPlanDao(DaoConfig config) {
        super(config);
    }
    
    public ShortPlanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHORT_PLAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"PARENT_PLAN_ID\" INTEGER NOT NULL ," + // 1: parentPlanId
                "\"CYCLE_TYPE\" INTEGER NOT NULL ," + // 2: cycleType
                "\"CURRENT\" REAL NOT NULL ," + // 3: current
                "\"TARGET\" REAL NOT NULL ," + // 4: target
                "\"UNIT\" TEXT);"); // 5: unit
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHORT_PLAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ShortPlan entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getParentPlanId());
        stmt.bindLong(3, entity.getCycleType());
        stmt.bindDouble(4, entity.getCurrent());
        stmt.bindDouble(5, entity.getTarget());
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(6, unit);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ShortPlan entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getParentPlanId());
        stmt.bindLong(3, entity.getCycleType());
        stmt.bindDouble(4, entity.getCurrent());
        stmt.bindDouble(5, entity.getTarget());
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(6, unit);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public ShortPlan readEntity(Cursor cursor, int offset) {
        ShortPlan entity = new ShortPlan( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // parentPlanId
            cursor.getInt(offset + 2), // cycleType
            cursor.getDouble(offset + 3), // current
            cursor.getDouble(offset + 4), // target
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // unit
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ShortPlan entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setParentPlanId(cursor.getLong(offset + 1));
        entity.setCycleType(cursor.getInt(offset + 2));
        entity.setCurrent(cursor.getDouble(offset + 3));
        entity.setTarget(cursor.getDouble(offset + 4));
        entity.setUnit(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ShortPlan entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ShortPlan entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ShortPlan entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
