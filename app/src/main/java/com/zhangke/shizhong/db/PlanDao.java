package com.zhangke.shizhong.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PLAN".
*/
public class PlanDao extends AbstractDao<Plan, Long> {

    public static final String TABLENAME = "PLAN";

    /**
     * Properties of entity Plan.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property PlanName = new Property(1, String.class, "planName", false, "PLAN_NAME");
        public final static Property PlanDescription = new Property(2, String.class, "planDescription", false, "PLAN_DESCRIPTION");
        public final static Property StartDate = new Property(3, String.class, "startDate", false, "START_DATE");
        public final static Property FinishDate = new Property(4, String.class, "finishDate", false, "FINISH_DATE");
    }


    public PlanDao(DaoConfig config) {
        super(config);
    }
    
    public PlanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"PLAN_NAME\" TEXT," + // 1: planName
                "\"PLAN_DESCRIPTION\" TEXT," + // 2: planDescription
                "\"START_DATE\" TEXT," + // 3: startDate
                "\"FINISH_DATE\" TEXT);"); // 4: finishDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Plan entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String planName = entity.getPlanName();
        if (planName != null) {
            stmt.bindString(2, planName);
        }
 
        String planDescription = entity.getPlanDescription();
        if (planDescription != null) {
            stmt.bindString(3, planDescription);
        }
 
        String startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindString(4, startDate);
        }
 
        String finishDate = entity.getFinishDate();
        if (finishDate != null) {
            stmt.bindString(5, finishDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Plan entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String planName = entity.getPlanName();
        if (planName != null) {
            stmt.bindString(2, planName);
        }
 
        String planDescription = entity.getPlanDescription();
        if (planDescription != null) {
            stmt.bindString(3, planDescription);
        }
 
        String startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindString(4, startDate);
        }
 
        String finishDate = entity.getFinishDate();
        if (finishDate != null) {
            stmt.bindString(5, finishDate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Plan readEntity(Cursor cursor, int offset) {
        Plan entity = new Plan( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // planName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // planDescription
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // startDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // finishDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Plan entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setPlanName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPlanDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStartDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFinishDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Plan entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Plan entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Plan entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
